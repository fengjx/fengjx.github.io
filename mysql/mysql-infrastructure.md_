+++
author = "FengJianxin"
title = "mysql-01-基础架构"
description = "MySQL基础架构"
date = "2019-11-25"
tags = ["mysql"]
categories = ["mysql"]
aliases = [""]
+++


一条SQL从执行到返回的执行过程

![MySQL基础架构](/img/mysql/mysql-architect.jpg)

MySQL基础架构大致上分为server层和存储引擎层。

server层包括：连接器、查询缓存、分析器、优化器、执行器。

存储引擎层：负责数据的存储和提取，以插件方式集成到MySQL中。常用的存储引擎是 InnoDB，从 MySQL 5.5.5 版本开始成为了默认存储引擎。


### 连接器

连接层负责与客户端建立连接，校验用户名、密码，对连接授权。也就是说，当连接建立后，即便数据库更新了权限，对当前连接是没有影响的，新创建的连接会得到新的权限。

客户端如果太长时间没操作，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制，默认值是 8 小时。如果客户端连接太多，长时间没有释放，也会占用MySQL内存。

```sql
-- 数据库连接语句
mysql -h$ip -P$port -u$user -p$pwd

-- 查看有客户端连接，Time表示连接时长（单位秒）
mysql> show processlist;
+----+------+---------------------+------+---------+------+----------+------------------+
| Id | User | Host                | db   | Command | Time | State    | Info             |
+----+------+---------------------+------+---------+------+----------+------------------+
| 12 | root | 192.168.1.102:53887 | NULL | Query   |    0 | starting | show processlist |
| 14 | root | 192.168.1.102:53897 | NULL | Sleep   |   17 |          | NULL             |
| 15 | root | 192.168.1.102:53898 | NULL | Sleep   |   14 |          | NULL             |
+----+------+---------------------+------+---------+------+----------+------------------+
3 rows in set (0.01 sec)
```

### 查询缓存

MySQL 接收到一个查询请求后，会查看这个sql是否有缓存数据（key对应sql，value对应查询结果），如果有则直接返回。如果没有则交给分析器处理。

> 在数据更新频繁的场景不要使用查询缓存，





