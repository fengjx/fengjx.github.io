<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on 冯小小，一个开发者</title>
    <link>https://blog.fengjx.com/categories/java/</link>
    <description>Recent content in java on 冯小小，一个开发者</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 19 Nov 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://blog.fengjx.com/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jvm-05-监控分析工具</title>
      <link>https://blog.fengjx.com/java/jvm/tools/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/jvm/tools/</guid>
      <description>文中案例均基于JDK8 Reference 深入理解Java虚拟机（第2版） 第4章 第三方工具 arthas 阿里开源的Java诊断利器 perfma 国内jvm在线分析平台 GCViewer 图形化gc日志</description>
    </item>
    
    <item>
      <title>jvm-03-垃圾收集</title>
      <link>https://blog.fengjx.com/java/jvm/gc/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/jvm/gc/</guid>
      <description>Reference 深入理解Java虚拟机（第2版） 这次，真正学懂 Java 垃圾回收机制 不用找了，深入理解G1垃圾收集器和GC日志，都整理好了 46张PPT讲述JVM、</description>
    </item>
    
    <item>
      <title>jvm-04-参数配置</title>
      <link>https://blog.fengjx.com/java/jvm/jvm-option/</link>
      <pubDate>Tue, 17 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/jvm/jvm-option/</guid>
      <description>Reference 一份JVM参数 作为高级开发，你懂这些 JVM 参数吗 参数说明 jvm参数分为：标准参数(以-开始)与非标准参数; 可以通过java -help查看所有标</description>
    </item>
    
    <item>
      <title>jvm-01-java虚拟机</title>
      <link>https://blog.fengjx.com/java/jvm/default/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/jvm/default/</guid>
      <description>JVM结构体系 类加载机制 JVM内存管理 垃圾收集 JVM参数配置 JVM监控工具 GC调优方法 GC调优案例分析 Java字节码</description>
    </item>
    
    <item>
      <title>jvm-02-内存区域划分</title>
      <link>https://blog.fengjx.com/java/jvm/jvm-runtime-data-area/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/jvm/jvm-runtime-data-area/</guid>
      <description>Reference 深入理解Java虚拟机（第2版） 第2章 一文了解JVM JVM源码分析之Metaspace解密 堆（Heap） JVM中最大的内存区域，被所有线程</description>
    </item>
    
    <item>
      <title>新的Date&amp;Time API</title>
      <link>https://blog.fengjx.com/java/java8/date/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/java8/date/</guid>
      <description>java8之前的日期相关对象中存在的问题： 非线程安全，例如：SimpleDateFormat, Calendar, TimeZone 设计不合理：java.util和java.</description>
    </item>
    
    <item>
      <title>Stream（流）</title>
      <link>https://blog.fengjx.com/java/java8/stream/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/java8/stream/</guid>
      <description>什么是Stream Java8添加了一个新的接口Stream（流），可以用函数式风格对数据进行处理。就像写sql语句一样。 流处理过程 +--------+ +--------+ +--------+ | 创</description>
    </item>
    
    <item>
      <title>方法引用</title>
      <link>https://blog.fengjx.com/java/java8/method-ref/</link>
      <pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/java8/method-ref/</guid>
      <description>方法引用可以使用操作符“::”来应用已有方法的处理逻辑。简化代码和复用代码逻辑。 方法引用包括几种方式： 构造器引用: Class::new 静态方法引用: Class::staticMethod 实例方法</description>
    </item>
    
    <item>
      <title>Lambda表达式与函数式接口</title>
      <link>https://blog.fengjx.com/java/java8/lambda-function/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/java8/lambda-function/</guid>
      <description>Lambda表达式 java8中引入了Lambda表达式是函数式接口的一个匿名函数定义实现类，类似js里的闭包。 Lambda可以大大简化函数式</description>
    </item>
    
    <item>
      <title>java线程实践与总结</title>
      <link>https://blog.fengjx.com/java/concurrent/thread/awesome/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/concurrent/thread/awesome/</guid>
      <description>java线程实践与总结 学习教程 http://ifeve.com/java-concurrency-thread-directory/ http://tutorials.jenkov.com/java-util-concurrent/index.html 线程状态 状态类型在枚举类java.lang.thread.State中定义 NEW-新建：线程刚创建，还没有</description>
    </item>
    
    <item>
      <title>java线程池</title>
      <link>https://blog.fengjx.com/java/concurrent/thread/thread-pool/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/concurrent/thread/thread-pool/</guid>
      <description>jdk提供的常用线程池 使用Executors静态方法可以创建5种不同配置和类型的线程池 newCachedThreadPool() 用来创建可缓存的线程，当没有缓存线程可用时，就创建新</description>
    </item>
    
    <item>
      <title>java io实践与总结</title>
      <link>https://blog.fengjx.com/java/socket/java-io/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/socket/java-io/</guid>
      <description>bio java.io和java.net包，代码简单直观，同步/阻塞IO，一个连接需要一个处理线程，如果是几百个连接的应用，不会有什么问题，如果连</description>
    </item>
    
    <item>
      <title>netty介绍</title>
      <link>https://blog.fengjx.com/java/socket/netty/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/socket/netty/</guid>
      <description>优点 性能高、易用、java中几乎所有框架的网络通信都使用netty。 沾包、拆包 沾包、拆包问题的产生是因为TCP协议是基于数据流的协议，就像流</description>
    </item>
    
  </channel>
</rss>
