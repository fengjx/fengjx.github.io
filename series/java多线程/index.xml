<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java多线程 on 冯小小，一个开发者</title>
    <link>https://blog.fengjx.com/series/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
    <description>Recent content in java多线程 on 冯小小，一个开发者</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 10 Mar 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://blog.fengjx.com/series/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>java线程实践与总结</title>
      <link>https://blog.fengjx.com/java/concurrent/thread/awesome/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/concurrent/thread/awesome/</guid>
      <description>java线程实践与总结 学习教程 http://ifeve.com/java-concurrency-thread-directory/ http://tutorials.jenkov.com/java-util-concurrent/index.html 线程状态 状态类型在枚举类java.lang.thread.State中定义 NEW-新建：线程刚创建，还没有</description>
    </item>
    
    <item>
      <title>java线程池</title>
      <link>https://blog.fengjx.com/java/concurrent/thread/thread-pool/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.fengjx.com/java/concurrent/thread/thread-pool/</guid>
      <description>jdk提供的常用线程池 使用Executors静态方法可以创建5种不同配置和类型的线程池 newCachedThreadPool() 用来创建可缓存的线程，当没有缓存线程可用时，就创建新</description>
    </item>
    
  </channel>
</rss>
